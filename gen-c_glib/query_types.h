/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QUERY_TYPES_H
#define QUERY_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* custom thrift includes */

/* begin types */

enum _I_ValueType {
  I__VALUE_TYPE_VT_INTEGER = 0,
  I__VALUE_TYPE_VT_STRING = 1,
  I__VALUE_TYPE_VT_FLOATING = 2,
  I__VALUE_TYPE_VT_BOOLEAN = 3
};
typedef enum _I_ValueType I_ValueType;

/* return the name of the constant */
const char *
toString_I_ValueType(int value); 

enum _I_LinkType {
  I__LINK_TYPE_LT_TO = 0,
  I__LINK_TYPE_LT_FROM = 1,
  I__LINK_TYPE_LT_BOTH = 2,
  I__LINK_TYPE_LT_ANY = 3
};
typedef enum _I_LinkType I_LinkType;

/* return the name of the constant */
const char *
toString_I_LinkType(int value); 

enum _I_Comparation {
  I__COMPARATION_CMP_GT = 0,
  I__COMPARATION_CMP_LT = 1,
  I__COMPARATION_CMP_GE = 2,
  I__COMPARATION_CMP_LE = 3,
  I__COMPARATION_CMP_EQ = 4,
  I__COMPARATION_CMP_NEQ = 5,
  I__COMPARATION_CMP_CONTAINS = 6
};
typedef enum _I_Comparation I_Comparation;

/* return the name of the constant */
const char *
toString_I_Comparation(int value); 

enum _I_ComparableType {
  I__COMPARABLE_TYPE_CMPT_FIELD = 0,
  I__COMPARABLE_TYPE_CMPT_VALUE = 1
};
typedef enum _I_ComparableType I_ComparableType;

/* return the name of the constant */
const char *
toString_I_ComparableType(int value); 

enum _I_PredicateType {
  I__PREDICATE_TYPE_PT_TERM = 0,
  I__PREDICATE_TYPE_PT_OR = 1,
  I__PREDICATE_TYPE_PT_AND = 2
};
typedef enum _I_PredicateType I_PredicateType;

/* return the name of the constant */
const char *
toString_I_PredicateType(int value); 

enum _I_QueryType {
  I__QUERY_TYPE_SCHEMA_CREATE = 0,
  I__QUERY_TYPE_SCHEMA_GET = 1,
  I__QUERY_TYPE_SCHEMA_GET_ALL = 2,
  I__QUERY_TYPE_SCHEMA_DELETE = 3,
  I__QUERY_TYPE_NODE_CREATE = 4,
  I__QUERY_TYPE_NODE_UPDATE = 5,
  I__QUERY_TYPE_NODE_DELETE = 6,
  I__QUERY_TYPE_NODE_MATCH = 7,
  I__QUERY_TYPE_LINK_CREATE = 8,
  I__QUERY_TYPE_LINK_DELETE = 9,
  I__QUERY_TYPE_MATCH = 10
};
typedef enum _I_QueryType I_QueryType;

/* return the name of the constant */
const char *
toString_I_QueryType(int value); 

enum _I_Return {
  I__RETURN_RETURN_NOTHING = 0,
  I__RETURN_RETURN_NODE_FIRST = 1,
  I__RETURN_RETURN_NODE_SECOND = 2,
  I__RETURN_RETURN_LINK = 4,
  I__RETURN_RETURN_ALL = 7,
  I__RETURN_RETURN_UNDEF = 8
};
typedef enum _I_Return I_Return;

/* return the name of the constant */
const char *
toString_I_Return(int value); 

enum _I_QueryResultType {
  I__QUERY_RESULT_TYPE_RESULT_SCHEMA = 0,
  I__QUERY_RESULT_TYPE_RESULT_GENERATOR = 1,
  I__QUERY_RESULT_TYPE_RESULT_NONE = 2
};
typedef enum _I_QueryResultType I_QueryResultType;

/* return the name of the constant */
const char *
toString_I_QueryResultType(int value); 

/* struct I_uValue */
struct _I_uValue
{ 
  ThriftStruct parent; 

  /* public */
  gint32 integer;
  gboolean __isset_integer;
  gchar * string_;
  gboolean __isset_string_;
  gdouble floating;
  gboolean __isset_floating;
  gboolean boolean;
  gboolean __isset_boolean;
};
typedef struct _I_uValue I_uValue;

struct _I_uValueClass
{
  ThriftStructClass parent;
};
typedef struct _I_uValueClass I_uValueClass;

GType i_u_value_get_type (void);
#define TYPE_I_U_VALUE (i_u_value_get_type())
#define I_U_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_U_VALUE, I_uValue))
#define I_U_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_U_VALUE, I_uValueClass))
#define IS_I_U_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_U_VALUE))
#define IS_I_U_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_U_VALUE))
#define I_U_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_U_VALUE, I_uValueClass))

/* struct I_Value */
struct _I_Value
{ 
  ThriftStruct parent; 

  /* public */
  I_ValueType type;
  gboolean __isset_type;
  I_uValue * value;
  gboolean __isset_value;
};
typedef struct _I_Value I_Value;

struct _I_ValueClass
{
  ThriftStructClass parent;
};
typedef struct _I_ValueClass I_ValueClass;

GType i__value_get_type (void);
#define TYPE_I__VALUE (i__value_get_type())
#define I__VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__VALUE, I_Value))
#define I__VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__VALUE, I_ValueClass))
#define IS_I__VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__VALUE))
#define IS_I__VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__VALUE))
#define I__VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__VALUE, I_ValueClass))

/* struct I_Property */
struct _I_Property
{ 
  ThriftStruct parent; 

  /* public */
  gchar * field;
  gboolean __isset_field;
  I_Value * value;
  gboolean __isset_value;
};
typedef struct _I_Property I_Property;

struct _I_PropertyClass
{
  ThriftStructClass parent;
};
typedef struct _I_PropertyClass I_PropertyClass;

GType i__property_get_type (void);
#define TYPE_I__PROPERTY (i__property_get_type())
#define I__PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__PROPERTY, I_Property))
#define I__PROPERTY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__PROPERTY, I_PropertyClass))
#define IS_I__PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__PROPERTY))
#define IS_I__PROPERTY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__PROPERTY))
#define I__PROPERTY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__PROPERTY, I_PropertyClass))

/* struct I_Attribute */
struct _I_Attribute
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  I_ValueType vt;
  gboolean __isset_vt;
};
typedef struct _I_Attribute I_Attribute;

struct _I_AttributeClass
{
  ThriftStructClass parent;
};
typedef struct _I_AttributeClass I_AttributeClass;

GType i__attribute_get_type (void);
#define TYPE_I__ATTRIBUTE (i__attribute_get_type())
#define I__ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__ATTRIBUTE, I_Attribute))
#define I__ATTRIBUTE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__ATTRIBUTE, I_AttributeClass))
#define IS_I__ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__ATTRIBUTE))
#define IS_I__ATTRIBUTE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__ATTRIBUTE))
#define I__ATTRIBUTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__ATTRIBUTE, I_AttributeClass))

/* struct I_Schema */
struct _I_Schema
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  GPtrArray * attributes;
  gboolean __isset_attributes;
};
typedef struct _I_Schema I_Schema;

struct _I_SchemaClass
{
  ThriftStructClass parent;
};
typedef struct _I_SchemaClass I_SchemaClass;

GType i__schema_get_type (void);
#define TYPE_I__SCHEMA (i__schema_get_type())
#define I__SCHEMA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__SCHEMA, I_Schema))
#define I__SCHEMA_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__SCHEMA, I_SchemaClass))
#define IS_I__SCHEMA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__SCHEMA))
#define IS_I__SCHEMA_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__SCHEMA))
#define I__SCHEMA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__SCHEMA, I_SchemaClass))

/* struct I_Node */
struct _I_Node
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  GPtrArray * properties;
  gboolean __isset_properties;
};
typedef struct _I_Node I_Node;

struct _I_NodeClass
{
  ThriftStructClass parent;
};
typedef struct _I_NodeClass I_NodeClass;

GType i__node_get_type (void);
#define TYPE_I__NODE (i__node_get_type())
#define I__NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__NODE, I_Node))
#define I__NODE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__NODE, I_NodeClass))
#define IS_I__NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__NODE))
#define IS_I__NODE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__NODE))
#define I__NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__NODE, I_NodeClass))

/* struct I_Link */
struct _I_Link
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  I_LinkType type;
  gboolean __isset_type;
};
typedef struct _I_Link I_Link;

struct _I_LinkClass
{
  ThriftStructClass parent;
};
typedef struct _I_LinkClass I_LinkClass;

GType i__link_get_type (void);
#define TYPE_I__LINK (i__link_get_type())
#define I__LINK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__LINK, I_Link))
#define I__LINK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__LINK, I_LinkClass))
#define IS_I__LINK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__LINK))
#define IS_I__LINK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__LINK))
#define I__LINK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__LINK, I_LinkClass))

/* struct I_uComparable */
struct _I_uComparable
{ 
  ThriftStruct parent; 

  /* public */
  gchar * field_name;
  gboolean __isset_field_name;
  I_Value * value;
  gboolean __isset_value;
};
typedef struct _I_uComparable I_uComparable;

struct _I_uComparableClass
{
  ThriftStructClass parent;
};
typedef struct _I_uComparableClass I_uComparableClass;

GType i_u_comparable_get_type (void);
#define TYPE_I_U_COMPARABLE (i_u_comparable_get_type())
#define I_U_COMPARABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_U_COMPARABLE, I_uComparable))
#define I_U_COMPARABLE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_U_COMPARABLE, I_uComparableClass))
#define IS_I_U_COMPARABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_U_COMPARABLE))
#define IS_I_U_COMPARABLE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_U_COMPARABLE))
#define I_U_COMPARABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_U_COMPARABLE, I_uComparableClass))

/* struct I_Comparable */
struct _I_Comparable
{ 
  ThriftStruct parent; 

  /* public */
  I_ComparableType type;
  gboolean __isset_type;
  I_uComparable * comparable;
  gboolean __isset_comparable;
};
typedef struct _I_Comparable I_Comparable;

struct _I_ComparableClass
{
  ThriftStructClass parent;
};
typedef struct _I_ComparableClass I_ComparableClass;

GType i__comparable_get_type (void);
#define TYPE_I__COMPARABLE (i__comparable_get_type())
#define I__COMPARABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__COMPARABLE, I_Comparable))
#define I__COMPARABLE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__COMPARABLE, I_ComparableClass))
#define IS_I__COMPARABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__COMPARABLE))
#define IS_I__COMPARABLE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__COMPARABLE))
#define I__COMPARABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__COMPARABLE, I_ComparableClass))

/* struct I_Compare */
struct _I_Compare
{ 
  ThriftStruct parent; 

  /* public */
  I_Comparation cmp;
  gboolean __isset_cmp;
  I_Comparable * with_;
  gboolean __isset_with_;
};
typedef struct _I_Compare I_Compare;

struct _I_CompareClass
{
  ThriftStructClass parent;
};
typedef struct _I_CompareClass I_CompareClass;

GType i__compare_get_type (void);
#define TYPE_I__COMPARE (i__compare_get_type())
#define I__COMPARE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__COMPARE, I_Compare))
#define I__COMPARE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__COMPARE, I_CompareClass))
#define IS_I__COMPARE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__COMPARE))
#define IS_I__COMPARE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__COMPARE))
#define I__COMPARE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__COMPARE, I_CompareClass))

/* struct I_ConditionCompare */
struct _I_ConditionCompare
{ 
  ThriftStruct parent; 

  /* public */
  I_Comparable * left;
  gboolean __isset_left;
  I_Compare * compare;
  gboolean __isset_compare;
};
typedef struct _I_ConditionCompare I_ConditionCompare;

struct _I_ConditionCompareClass
{
  ThriftStructClass parent;
};
typedef struct _I_ConditionCompareClass I_ConditionCompareClass;

GType i__condition_compare_get_type (void);
#define TYPE_I__CONDITION_COMPARE (i__condition_compare_get_type())
#define I__CONDITION_COMPARE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__CONDITION_COMPARE, I_ConditionCompare))
#define I__CONDITION_COMPARE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__CONDITION_COMPARE, I_ConditionCompareClass))
#define IS_I__CONDITION_COMPARE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__CONDITION_COMPARE))
#define IS_I__CONDITION_COMPARE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__CONDITION_COMPARE))
#define I__CONDITION_COMPARE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__CONDITION_COMPARE, I_ConditionCompareClass))

/* struct I_uPredicate */
struct _I_uPredicate
{ 
  ThriftStruct parent; 

  /* public */
  I_ConditionCompare * term;
  gboolean __isset_term;
  GPtrArray * and_;
  gboolean __isset_and_;
  GPtrArray * or_;
  gboolean __isset_or_;
};
typedef struct _I_uPredicate I_uPredicate;

struct _I_uPredicateClass
{
  ThriftStructClass parent;
};
typedef struct _I_uPredicateClass I_uPredicateClass;

GType i_u_predicate_get_type (void);
#define TYPE_I_U_PREDICATE (i_u_predicate_get_type())
#define I_U_PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_U_PREDICATE, I_uPredicate))
#define I_U_PREDICATE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_U_PREDICATE, I_uPredicateClass))
#define IS_I_U_PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_U_PREDICATE))
#define IS_I_U_PREDICATE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_U_PREDICATE))
#define I_U_PREDICATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_U_PREDICATE, I_uPredicateClass))

/* struct I_Predicate */
struct _I_Predicate
{ 
  ThriftStruct parent; 

  /* public */
  I_PredicateType type;
  gboolean __isset_type;
  I_uPredicate * predicate;
  gboolean __isset_predicate;
};
typedef struct _I_Predicate I_Predicate;

struct _I_PredicateClass
{
  ThriftStructClass parent;
};
typedef struct _I_PredicateClass I_PredicateClass;

GType i__predicate_get_type (void);
#define TYPE_I__PREDICATE (i__predicate_get_type())
#define I__PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__PREDICATE, I_Predicate))
#define I__PREDICATE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__PREDICATE, I_PredicateClass))
#define IS_I__PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__PREDICATE))
#define IS_I__PREDICATE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__PREDICATE))
#define I__PREDICATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__PREDICATE, I_PredicateClass))

/* struct I_NodeCondition */
struct _I_NodeCondition
{ 
  ThriftStruct parent; 

  /* public */
  gboolean is_null;
  gboolean __isset_is_null;
  gchar * schema;
  gboolean __isset_schema;
  GPtrArray * predicates;
  gboolean __isset_predicates;
};
typedef struct _I_NodeCondition I_NodeCondition;

struct _I_NodeConditionClass
{
  ThriftStructClass parent;
};
typedef struct _I_NodeConditionClass I_NodeConditionClass;

GType i__node_condition_get_type (void);
#define TYPE_I__NODE_CONDITION (i__node_condition_get_type())
#define I__NODE_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__NODE_CONDITION, I_NodeCondition))
#define I__NODE_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__NODE_CONDITION, I_NodeConditionClass))
#define IS_I__NODE_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__NODE_CONDITION))
#define IS_I__NODE_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__NODE_CONDITION))
#define I__NODE_CONDITION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__NODE_CONDITION, I_NodeConditionClass))

/* struct I_LinkCondition */
struct _I_LinkCondition
{ 
  ThriftStruct parent; 

  /* public */
  gboolean is_null;
  gboolean __isset_is_null;
  I_LinkType link_type;
  gboolean __isset_link_type;
  gchar * link_name;
  gboolean __isset_link_name;
};
typedef struct _I_LinkCondition I_LinkCondition;

struct _I_LinkConditionClass
{
  ThriftStructClass parent;
};
typedef struct _I_LinkConditionClass I_LinkConditionClass;

GType i__link_condition_get_type (void);
#define TYPE_I__LINK_CONDITION (i__link_condition_get_type())
#define I__LINK_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__LINK_CONDITION, I_LinkCondition))
#define I__LINK_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__LINK_CONDITION, I_LinkConditionClass))
#define IS_I__LINK_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__LINK_CONDITION))
#define IS_I__LINK_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__LINK_CONDITION))
#define I__LINK_CONDITION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__LINK_CONDITION, I_LinkConditionClass))

/* struct I_MatchCondition */
struct _I_MatchCondition
{ 
  ThriftStruct parent; 

  /* public */
  gboolean is_null;
  gboolean __isset_is_null;
  I_NodeCondition * node_first_condition;
  gboolean __isset_node_first_condition;
  I_NodeCondition * node_second_condition;
  gboolean __isset_node_second_condition;
  I_NodeCondition * node_cross_condition;
  gboolean __isset_node_cross_condition;
  I_LinkCondition * link_condition;
  gboolean __isset_link_condition;
};
typedef struct _I_MatchCondition I_MatchCondition;

struct _I_MatchConditionClass
{
  ThriftStructClass parent;
};
typedef struct _I_MatchConditionClass I_MatchConditionClass;

GType i__match_condition_get_type (void);
#define TYPE_I__MATCH_CONDITION (i__match_condition_get_type())
#define I__MATCH_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__MATCH_CONDITION, I_MatchCondition))
#define I__MATCH_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__MATCH_CONDITION, I_MatchConditionClass))
#define IS_I__MATCH_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__MATCH_CONDITION))
#define IS_I__MATCH_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__MATCH_CONDITION))
#define I__MATCH_CONDITION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__MATCH_CONDITION, I_MatchConditionClass))

/* struct I_SchemaCreateQuery */
struct _I_SchemaCreateQuery
{ 
  ThriftStruct parent; 

  /* public */
  I_Schema * schema;
  gboolean __isset_schema;
};
typedef struct _I_SchemaCreateQuery I_SchemaCreateQuery;

struct _I_SchemaCreateQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_SchemaCreateQueryClass I_SchemaCreateQueryClass;

GType i__schema_create_query_get_type (void);
#define TYPE_I__SCHEMA_CREATE_QUERY (i__schema_create_query_get_type())
#define I__SCHEMA_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__SCHEMA_CREATE_QUERY, I_SchemaCreateQuery))
#define I__SCHEMA_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__SCHEMA_CREATE_QUERY, I_SchemaCreateQueryClass))
#define IS_I__SCHEMA_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__SCHEMA_CREATE_QUERY))
#define IS_I__SCHEMA_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__SCHEMA_CREATE_QUERY))
#define I__SCHEMA_CREATE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__SCHEMA_CREATE_QUERY, I_SchemaCreateQueryClass))

/* struct I_SchemaGetQuery */
struct _I_SchemaGetQuery
{ 
  ThriftStruct parent; 

  /* public */
  gchar * schema_name;
  gboolean __isset_schema_name;
};
typedef struct _I_SchemaGetQuery I_SchemaGetQuery;

struct _I_SchemaGetQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_SchemaGetQueryClass I_SchemaGetQueryClass;

GType i__schema_get_query_get_type (void);
#define TYPE_I__SCHEMA_GET_QUERY (i__schema_get_query_get_type())
#define I__SCHEMA_GET_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__SCHEMA_GET_QUERY, I_SchemaGetQuery))
#define I__SCHEMA_GET_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__SCHEMA_GET_QUERY, I_SchemaGetQueryClass))
#define IS_I__SCHEMA_GET_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__SCHEMA_GET_QUERY))
#define IS_I__SCHEMA_GET_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__SCHEMA_GET_QUERY))
#define I__SCHEMA_GET_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__SCHEMA_GET_QUERY, I_SchemaGetQueryClass))

/* struct I_SchemaGetAllQuery */
struct _I_SchemaGetAllQuery
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _I_SchemaGetAllQuery I_SchemaGetAllQuery;

struct _I_SchemaGetAllQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_SchemaGetAllQueryClass I_SchemaGetAllQueryClass;

GType i__schema_get_all_query_get_type (void);
#define TYPE_I__SCHEMA_GET_ALL_QUERY (i__schema_get_all_query_get_type())
#define I__SCHEMA_GET_ALL_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__SCHEMA_GET_ALL_QUERY, I_SchemaGetAllQuery))
#define I__SCHEMA_GET_ALL_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__SCHEMA_GET_ALL_QUERY, I_SchemaGetAllQueryClass))
#define IS_I__SCHEMA_GET_ALL_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__SCHEMA_GET_ALL_QUERY))
#define IS_I__SCHEMA_GET_ALL_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__SCHEMA_GET_ALL_QUERY))
#define I__SCHEMA_GET_ALL_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__SCHEMA_GET_ALL_QUERY, I_SchemaGetAllQueryClass))

/* struct I_SchemaDeleteQuery */
struct _I_SchemaDeleteQuery
{ 
  ThriftStruct parent; 

  /* public */
  gchar * schema_name;
  gboolean __isset_schema_name;
};
typedef struct _I_SchemaDeleteQuery I_SchemaDeleteQuery;

struct _I_SchemaDeleteQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_SchemaDeleteQueryClass I_SchemaDeleteQueryClass;

GType i__schema_delete_query_get_type (void);
#define TYPE_I__SCHEMA_DELETE_QUERY (i__schema_delete_query_get_type())
#define I__SCHEMA_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__SCHEMA_DELETE_QUERY, I_SchemaDeleteQuery))
#define I__SCHEMA_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__SCHEMA_DELETE_QUERY, I_SchemaDeleteQueryClass))
#define IS_I__SCHEMA_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__SCHEMA_DELETE_QUERY))
#define IS_I__SCHEMA_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__SCHEMA_DELETE_QUERY))
#define I__SCHEMA_DELETE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__SCHEMA_DELETE_QUERY, I_SchemaDeleteQueryClass))

/* struct I_NodeCreateQuery */
struct _I_NodeCreateQuery
{ 
  ThriftStruct parent; 

  /* public */
  gchar * schema_name;
  gboolean __isset_schema_name;
  I_Node * node;
  gboolean __isset_node;
};
typedef struct _I_NodeCreateQuery I_NodeCreateQuery;

struct _I_NodeCreateQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_NodeCreateQueryClass I_NodeCreateQueryClass;

GType i__node_create_query_get_type (void);
#define TYPE_I__NODE_CREATE_QUERY (i__node_create_query_get_type())
#define I__NODE_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__NODE_CREATE_QUERY, I_NodeCreateQuery))
#define I__NODE_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__NODE_CREATE_QUERY, I_NodeCreateQueryClass))
#define IS_I__NODE_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__NODE_CREATE_QUERY))
#define IS_I__NODE_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__NODE_CREATE_QUERY))
#define I__NODE_CREATE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__NODE_CREATE_QUERY, I_NodeCreateQueryClass))

/* struct I_NodeUpdateQuery */
struct _I_NodeUpdateQuery
{ 
  ThriftStruct parent; 

  /* public */
  I_NodeCondition * condition;
  gboolean __isset_condition;
  GPtrArray * properties;
  gboolean __isset_properties;
};
typedef struct _I_NodeUpdateQuery I_NodeUpdateQuery;

struct _I_NodeUpdateQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_NodeUpdateQueryClass I_NodeUpdateQueryClass;

GType i__node_update_query_get_type (void);
#define TYPE_I__NODE_UPDATE_QUERY (i__node_update_query_get_type())
#define I__NODE_UPDATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__NODE_UPDATE_QUERY, I_NodeUpdateQuery))
#define I__NODE_UPDATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__NODE_UPDATE_QUERY, I_NodeUpdateQueryClass))
#define IS_I__NODE_UPDATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__NODE_UPDATE_QUERY))
#define IS_I__NODE_UPDATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__NODE_UPDATE_QUERY))
#define I__NODE_UPDATE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__NODE_UPDATE_QUERY, I_NodeUpdateQueryClass))

/* struct I_NodeDeleteQuery */
struct _I_NodeDeleteQuery
{ 
  ThriftStruct parent; 

  /* public */
  I_NodeCondition * condition;
  gboolean __isset_condition;
};
typedef struct _I_NodeDeleteQuery I_NodeDeleteQuery;

struct _I_NodeDeleteQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_NodeDeleteQueryClass I_NodeDeleteQueryClass;

GType i__node_delete_query_get_type (void);
#define TYPE_I__NODE_DELETE_QUERY (i__node_delete_query_get_type())
#define I__NODE_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__NODE_DELETE_QUERY, I_NodeDeleteQuery))
#define I__NODE_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__NODE_DELETE_QUERY, I_NodeDeleteQueryClass))
#define IS_I__NODE_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__NODE_DELETE_QUERY))
#define IS_I__NODE_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__NODE_DELETE_QUERY))
#define I__NODE_DELETE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__NODE_DELETE_QUERY, I_NodeDeleteQueryClass))

/* struct I_NodeMatchQuery */
struct _I_NodeMatchQuery
{ 
  ThriftStruct parent; 

  /* public */
  I_NodeCondition * condition;
  gboolean __isset_condition;
};
typedef struct _I_NodeMatchQuery I_NodeMatchQuery;

struct _I_NodeMatchQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_NodeMatchQueryClass I_NodeMatchQueryClass;

GType i__node_match_query_get_type (void);
#define TYPE_I__NODE_MATCH_QUERY (i__node_match_query_get_type())
#define I__NODE_MATCH_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__NODE_MATCH_QUERY, I_NodeMatchQuery))
#define I__NODE_MATCH_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__NODE_MATCH_QUERY, I_NodeMatchQueryClass))
#define IS_I__NODE_MATCH_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__NODE_MATCH_QUERY))
#define IS_I__NODE_MATCH_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__NODE_MATCH_QUERY))
#define I__NODE_MATCH_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__NODE_MATCH_QUERY, I_NodeMatchQueryClass))

/* struct I_LinkCreateQuery */
struct _I_LinkCreateQuery
{ 
  ThriftStruct parent; 

  /* public */
  gchar * link_name;
  gboolean __isset_link_name;
  I_LinkType link_type;
  gboolean __isset_link_type;
  I_NodeCondition * first;
  gboolean __isset_first;
  I_NodeCondition * second;
  gboolean __isset_second;
};
typedef struct _I_LinkCreateQuery I_LinkCreateQuery;

struct _I_LinkCreateQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_LinkCreateQueryClass I_LinkCreateQueryClass;

GType i__link_create_query_get_type (void);
#define TYPE_I__LINK_CREATE_QUERY (i__link_create_query_get_type())
#define I__LINK_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__LINK_CREATE_QUERY, I_LinkCreateQuery))
#define I__LINK_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__LINK_CREATE_QUERY, I_LinkCreateQueryClass))
#define IS_I__LINK_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__LINK_CREATE_QUERY))
#define IS_I__LINK_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__LINK_CREATE_QUERY))
#define I__LINK_CREATE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__LINK_CREATE_QUERY, I_LinkCreateQueryClass))

/* struct I_LinkDeleteQuery */
struct _I_LinkDeleteQuery
{ 
  ThriftStruct parent; 

  /* public */
  I_MatchCondition * condition;
  gboolean __isset_condition;
};
typedef struct _I_LinkDeleteQuery I_LinkDeleteQuery;

struct _I_LinkDeleteQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_LinkDeleteQueryClass I_LinkDeleteQueryClass;

GType i__link_delete_query_get_type (void);
#define TYPE_I__LINK_DELETE_QUERY (i__link_delete_query_get_type())
#define I__LINK_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__LINK_DELETE_QUERY, I_LinkDeleteQuery))
#define I__LINK_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__LINK_DELETE_QUERY, I_LinkDeleteQueryClass))
#define IS_I__LINK_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__LINK_DELETE_QUERY))
#define IS_I__LINK_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__LINK_DELETE_QUERY))
#define I__LINK_DELETE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__LINK_DELETE_QUERY, I_LinkDeleteQueryClass))

/* struct I_MatchQuery */
struct _I_MatchQuery
{ 
  ThriftStruct parent; 

  /* public */
  I_MatchCondition * condition;
  gboolean __isset_condition;
};
typedef struct _I_MatchQuery I_MatchQuery;

struct _I_MatchQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_MatchQueryClass I_MatchQueryClass;

GType i__match_query_get_type (void);
#define TYPE_I__MATCH_QUERY (i__match_query_get_type())
#define I__MATCH_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__MATCH_QUERY, I_MatchQuery))
#define I__MATCH_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__MATCH_QUERY, I_MatchQueryClass))
#define IS_I__MATCH_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__MATCH_QUERY))
#define IS_I__MATCH_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__MATCH_QUERY))
#define I__MATCH_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__MATCH_QUERY, I_MatchQueryClass))

/* struct I_uQuery */
struct _I_uQuery
{ 
  ThriftStruct parent; 

  /* public */
  I_SchemaCreateQuery * schema_create_query;
  gboolean __isset_schema_create_query;
  I_SchemaGetQuery * schema_get_query;
  gboolean __isset_schema_get_query;
  I_SchemaGetAllQuery * schema_get_all_query;
  gboolean __isset_schema_get_all_query;
  I_SchemaDeleteQuery * schema_delete_query;
  gboolean __isset_schema_delete_query;
  I_NodeCreateQuery * node_create_query;
  gboolean __isset_node_create_query;
  I_NodeUpdateQuery * node_update_query;
  gboolean __isset_node_update_query;
  I_NodeDeleteQuery * node_delete_query;
  gboolean __isset_node_delete_query;
  I_NodeMatchQuery * node_match_query;
  gboolean __isset_node_match_query;
  I_LinkCreateQuery * link_create_query;
  gboolean __isset_link_create_query;
  I_LinkDeleteQuery * link_delete_query;
  gboolean __isset_link_delete_query;
  I_MatchQuery * match_query;
  gboolean __isset_match_query;
};
typedef struct _I_uQuery I_uQuery;

struct _I_uQueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_uQueryClass I_uQueryClass;

GType i_u_query_get_type (void);
#define TYPE_I_U_QUERY (i_u_query_get_type())
#define I_U_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_U_QUERY, I_uQuery))
#define I_U_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_U_QUERY, I_uQueryClass))
#define IS_I_U_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_U_QUERY))
#define IS_I_U_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_U_QUERY))
#define I_U_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_U_QUERY, I_uQueryClass))

/* struct I_Query */
struct _I_Query
{ 
  ThriftStruct parent; 

  /* public */
  I_QueryType type;
  gboolean __isset_type;
  I_uQuery * query;
  gboolean __isset_query;
};
typedef struct _I_Query I_Query;

struct _I_QueryClass
{
  ThriftStructClass parent;
};
typedef struct _I_QueryClass I_QueryClass;

GType i__query_get_type (void);
#define TYPE_I__QUERY (i__query_get_type())
#define I__QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__QUERY, I_Query))
#define I__QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__QUERY, I_QueryClass))
#define IS_I__QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__QUERY))
#define IS_I__QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__QUERY))
#define I__QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__QUERY, I_QueryClass))

/* struct I_Result */
struct _I_Result
{ 
  ThriftStruct parent; 

  /* public */
  I_Return return_items;
  gboolean __isset_return_items;
  I_Node * first;
  gboolean __isset_first;
  I_Link * link;
  gboolean __isset_link;
  I_Node * second;
  gboolean __isset_second;
  I_Schema * schema;
  gboolean __isset_schema;
};
typedef struct _I_Result I_Result;

struct _I_ResultClass
{
  ThriftStructClass parent;
};
typedef struct _I_ResultClass I_ResultClass;

GType i__result_get_type (void);
#define TYPE_I__RESULT (i__result_get_type())
#define I__RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__RESULT, I_Result))
#define I__RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__RESULT, I_ResultClass))
#define IS_I__RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__RESULT))
#define IS_I__RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__RESULT))
#define I__RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__RESULT, I_ResultClass))

/* struct I_uQueryResult */
struct _I_uQueryResult
{ 
  ThriftStruct parent; 

  /* public */
  I_Schema * schema;
  gboolean __isset_schema;
  GPtrArray * items;
  gboolean __isset_items;
};
typedef struct _I_uQueryResult I_uQueryResult;

struct _I_uQueryResultClass
{
  ThriftStructClass parent;
};
typedef struct _I_uQueryResultClass I_uQueryResultClass;

GType i_u_query_result_get_type (void);
#define TYPE_I_U_QUERY_RESULT (i_u_query_result_get_type())
#define I_U_QUERY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_U_QUERY_RESULT, I_uQueryResult))
#define I_U_QUERY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_U_QUERY_RESULT, I_uQueryResultClass))
#define IS_I_U_QUERY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_U_QUERY_RESULT))
#define IS_I_U_QUERY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_U_QUERY_RESULT))
#define I_U_QUERY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_U_QUERY_RESULT, I_uQueryResultClass))

/* struct I_QueryResult */
struct _I_QueryResult
{ 
  ThriftStruct parent; 

  /* public */
  I_QueryResultType type;
  gboolean __isset_type;
  gchar * message;
  gboolean __isset_message;
  I_uQueryResult * result;
  gboolean __isset_result;
};
typedef struct _I_QueryResult I_QueryResult;

struct _I_QueryResultClass
{
  ThriftStructClass parent;
};
typedef struct _I_QueryResultClass I_QueryResultClass;

GType i__query_result_get_type (void);
#define TYPE_I__QUERY_RESULT (i__query_result_get_type())
#define I__QUERY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I__QUERY_RESULT, I_QueryResult))
#define I__QUERY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I__QUERY_RESULT, I_QueryResultClass))
#define IS_I__QUERY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I__QUERY_RESULT))
#define IS_I__QUERY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I__QUERY_RESULT))
#define I__QUERY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I__QUERY_RESULT, I_QueryResultClass))

/* constants */

/* struct querySvcExecuteArgs */
struct _querySvcExecuteArgs
{ 
  ThriftStruct parent; 

  /* public */
  I_Query * query;
  gboolean __isset_query;
};
typedef struct _querySvcExecuteArgs querySvcExecuteArgs;

struct _querySvcExecuteArgsClass
{
  ThriftStructClass parent;
};
typedef struct _querySvcExecuteArgsClass querySvcExecuteArgsClass;

GType query_svc_execute_args_get_type (void);
#define TYPE_QUERY_SVC_EXECUTE_ARGS (query_svc_execute_args_get_type())
#define QUERY_SVC_EXECUTE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUERY_SVC_EXECUTE_ARGS, querySvcExecuteArgs))
#define QUERY_SVC_EXECUTE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_QUERY_SVC_EXECUTE_ARGS, querySvcExecuteArgsClass))
#define IS_QUERY_SVC_EXECUTE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUERY_SVC_EXECUTE_ARGS))
#define IS_QUERY_SVC_EXECUTE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_QUERY_SVC_EXECUTE_ARGS))
#define QUERY_SVC_EXECUTE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_QUERY_SVC_EXECUTE_ARGS, querySvcExecuteArgsClass))

/* struct querySvcExecuteResult */
struct _querySvcExecuteResult
{ 
  ThriftStruct parent; 

  /* public */
  I_QueryResult * success;
  gboolean __isset_success;
};
typedef struct _querySvcExecuteResult querySvcExecuteResult;

struct _querySvcExecuteResultClass
{
  ThriftStructClass parent;
};
typedef struct _querySvcExecuteResultClass querySvcExecuteResultClass;

GType query_svc_execute_result_get_type (void);
#define TYPE_QUERY_SVC_EXECUTE_RESULT (query_svc_execute_result_get_type())
#define QUERY_SVC_EXECUTE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUERY_SVC_EXECUTE_RESULT, querySvcExecuteResult))
#define QUERY_SVC_EXECUTE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_QUERY_SVC_EXECUTE_RESULT, querySvcExecuteResultClass))
#define IS_QUERY_SVC_EXECUTE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUERY_SVC_EXECUTE_RESULT))
#define IS_QUERY_SVC_EXECUTE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_QUERY_SVC_EXECUTE_RESULT))
#define QUERY_SVC_EXECUTE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_QUERY_SVC_EXECUTE_RESULT, querySvcExecuteResultClass))

#endif /* QUERY_TYPES_H */
