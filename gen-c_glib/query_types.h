/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QUERY_TYPES_H
#define QUERY_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* custom thrift includes */

/* begin types */

enum _ValueType {
  VALUE_TYPE_VT_INTEGER = 0,
  VALUE_TYPE_VT_STRING = 1,
  VALUE_TYPE_VT_FLOATING = 2,
  VALUE_TYPE_VT_BOOLEAN = 3
};
typedef enum _ValueType ValueType;

/* return the name of the constant */
const char *
toString_ValueType(int value); 

enum _LinkType {
  LINK_TYPE_LT_TO = 0,
  LINK_TYPE_LT_FROM = 1,
  LINK_TYPE_LT_BOTH = 2,
  LINK_TYPE_LT_ANY = 3
};
typedef enum _LinkType LinkType;

/* return the name of the constant */
const char *
toString_LinkType(int value); 

enum _Comparation {
  COMPARATION_CMP_GT = 0,
  COMPARATION_CMP_LT = 1,
  COMPARATION_CMP_GE = 2,
  COMPARATION_CMP_LE = 3,
  COMPARATION_CMP_EQ = 4,
  COMPARATION_CMP_NEQ = 5,
  COMPARATION_CMP_CONTAINS = 6
};
typedef enum _Comparation Comparation;

/* return the name of the constant */
const char *
toString_Comparation(int value); 

enum _ComparableType {
  COMPARABLE_TYPE_CMPT_FIELD = 0,
  COMPARABLE_TYPE_CMPT_VALUE = 1
};
typedef enum _ComparableType ComparableType;

/* return the name of the constant */
const char *
toString_ComparableType(int value); 

enum _PredicateType {
  PREDICATE_TYPE_PT_TERM = 0,
  PREDICATE_TYPE_PT_OR = 1,
  PREDICATE_TYPE_PT_AND = 2
};
typedef enum _PredicateType PredicateType;

/* return the name of the constant */
const char *
toString_PredicateType(int value); 

enum _QueryType {
  QUERY_TYPE_SCHEMA_CREATE = 0,
  QUERY_TYPE_SCHEMA_GET = 1,
  QUERY_TYPE_SCHEMA_GET_ALL = 2,
  QUERY_TYPE_SCHEMA_DELETE = 3,
  QUERY_TYPE_NODE_CREATE = 4,
  QUERY_TYPE_NODE_UPDATE = 5,
  QUERY_TYPE_NODE_DELETE = 6,
  QUERY_TYPE_NODE_MATCH = 7,
  QUERY_TYPE_LINK_CREATE = 8,
  QUERY_TYPE_LINK_DELETE = 9,
  QUERY_TYPE_MATCH = 10
};
typedef enum _QueryType QueryType;

/* return the name of the constant */
const char *
toString_QueryType(int value); 

enum _Return {
  RETURN_RETURN_NOTHING = 0,
  RETURN_RETURN_NODE_FIRST = 1,
  RETURN_RETURN_NODE_SECOND = 2,
  RETURN_RETURN_LINK = 4,
  RETURN_RETURN_ALL = 7,
  RETURN_RETURN_UNDEF = 8
};
typedef enum _Return Return;

/* return the name of the constant */
const char *
toString_Return(int value); 

enum _QueryResultType {
  QUERY_RESULT_TYPE_RESULT_SCHEMA = 0,
  QUERY_RESULT_TYPE_RESULT_GENERATOR = 1,
  QUERY_RESULT_TYPE_RESULT_NONE = 2
};
typedef enum _QueryResultType QueryResultType;

/* return the name of the constant */
const char *
toString_QueryResultType(int value); 

/* struct uValue */
struct _uValue
{ 
  ThriftStruct parent; 

  /* public */
  gint32 integer;
  gboolean __isset_integer;
  gchar * string_;
  gboolean __isset_string_;
  gdouble floating;
  gboolean __isset_floating;
  gboolean boolean;
  gboolean __isset_boolean;
};
typedef struct _uValue uValue;

struct _uValueClass
{
  ThriftStructClass parent;
};
typedef struct _uValueClass uValueClass;

GType u_value_get_type (void);
#define TYPE_U_VALUE (u_value_get_type())
#define U_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_U_VALUE, uValue))
#define U_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_U_VALUE, uValueClass))
#define IS_U_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_U_VALUE))
#define IS_U_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_U_VALUE))
#define U_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_U_VALUE, uValueClass))

/* struct Value */
struct _Value
{ 
  ThriftStruct parent; 

  /* public */
  ValueType type;
  gboolean __isset_type;
  uValue * value;
  gboolean __isset_value;
};
typedef struct _Value Value;

struct _ValueClass
{
  ThriftStructClass parent;
};
typedef struct _ValueClass ValueClass;

GType value_get_type (void);
#define TYPE_VALUE (value_get_type())
#define VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_VALUE, Value))
#define VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_VALUE, ValueClass))
#define IS_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_VALUE))
#define IS_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_VALUE))
#define VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_VALUE, ValueClass))

/* struct Property */
struct _Property
{ 
  ThriftStruct parent; 

  /* public */
  gchar * field;
  gboolean __isset_field;
  Value * value;
  gboolean __isset_value;
};
typedef struct _Property Property;

struct _PropertyClass
{
  ThriftStructClass parent;
};
typedef struct _PropertyClass PropertyClass;

GType property_get_type (void);
#define TYPE_PROPERTY (property_get_type())
#define PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PROPERTY, Property))
#define PROPERTY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PROPERTY, PropertyClass))
#define IS_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PROPERTY))
#define IS_PROPERTY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PROPERTY))
#define PROPERTY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PROPERTY, PropertyClass))

/* struct Attribute */
struct _Attribute
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  ValueType vt;
  gboolean __isset_vt;
};
typedef struct _Attribute Attribute;

struct _AttributeClass
{
  ThriftStructClass parent;
};
typedef struct _AttributeClass AttributeClass;

GType attribute_get_type (void);
#define TYPE_ATTRIBUTE (attribute_get_type())
#define ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ATTRIBUTE, Attribute))
#define ATTRIBUTE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ATTRIBUTE, AttributeClass))
#define IS_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ATTRIBUTE))
#define IS_ATTRIBUTE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ATTRIBUTE))
#define ATTRIBUTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ATTRIBUTE, AttributeClass))

/* struct Schema */
struct _Schema
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  GPtrArray * attributes;
  gboolean __isset_attributes;
};
typedef struct _Schema Schema;

struct _SchemaClass
{
  ThriftStructClass parent;
};
typedef struct _SchemaClass SchemaClass;

GType schema_get_type (void);
#define TYPE_SCHEMA (schema_get_type())
#define SCHEMA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SCHEMA, Schema))
#define SCHEMA_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SCHEMA, SchemaClass))
#define IS_SCHEMA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SCHEMA))
#define IS_SCHEMA_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SCHEMA))
#define SCHEMA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SCHEMA, SchemaClass))

/* struct Node */
struct _Node
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  GPtrArray * properties;
  gboolean __isset_properties;
};
typedef struct _Node Node;

struct _NodeClass
{
  ThriftStructClass parent;
};
typedef struct _NodeClass NodeClass;

GType node_get_type (void);
#define TYPE_NODE (node_get_type())
#define NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NODE, Node))
#define NODE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NODE, NodeClass))
#define IS_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NODE))
#define IS_NODE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NODE))
#define NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NODE, NodeClass))

/* struct Link */
struct _Link
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  LinkType type;
  gboolean __isset_type;
  gchar * first;
  gboolean __isset_first;
  gchar * second;
  gboolean __isset_second;
};
typedef struct _Link Link;

struct _LinkClass
{
  ThriftStructClass parent;
};
typedef struct _LinkClass LinkClass;

GType link_get_type (void);
#define TYPE_LINK (link_get_type())
#define LINK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LINK, Link))
#define LINK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_LINK, LinkClass))
#define IS_LINK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LINK))
#define IS_LINK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_LINK))
#define LINK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LINK, LinkClass))

/* struct uComparable */
struct _uComparable
{ 
  ThriftStruct parent; 

  /* public */
  gchar * field_name;
  gboolean __isset_field_name;
  Value * value;
  gboolean __isset_value;
};
typedef struct _uComparable uComparable;

struct _uComparableClass
{
  ThriftStructClass parent;
};
typedef struct _uComparableClass uComparableClass;

GType u_comparable_get_type (void);
#define TYPE_U_COMPARABLE (u_comparable_get_type())
#define U_COMPARABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_U_COMPARABLE, uComparable))
#define U_COMPARABLE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_U_COMPARABLE, uComparableClass))
#define IS_U_COMPARABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_U_COMPARABLE))
#define IS_U_COMPARABLE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_U_COMPARABLE))
#define U_COMPARABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_U_COMPARABLE, uComparableClass))

/* struct Comparable */
struct _Comparable
{ 
  ThriftStruct parent; 

  /* public */
  ComparableType type;
  gboolean __isset_type;
  uComparable * comparable;
  gboolean __isset_comparable;
};
typedef struct _Comparable Comparable;

struct _ComparableClass
{
  ThriftStructClass parent;
};
typedef struct _ComparableClass ComparableClass;

GType comparable_get_type (void);
#define TYPE_COMPARABLE (comparable_get_type())
#define COMPARABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COMPARABLE, Comparable))
#define COMPARABLE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COMPARABLE, ComparableClass))
#define IS_COMPARABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COMPARABLE))
#define IS_COMPARABLE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COMPARABLE))
#define COMPARABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COMPARABLE, ComparableClass))

/* struct Compare */
struct _Compare
{ 
  ThriftStruct parent; 

  /* public */
  Comparation cmp;
  gboolean __isset_cmp;
  Comparable * with_;
  gboolean __isset_with_;
};
typedef struct _Compare Compare;

struct _CompareClass
{
  ThriftStructClass parent;
};
typedef struct _CompareClass CompareClass;

GType compare_get_type (void);
#define TYPE_COMPARE (compare_get_type())
#define COMPARE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COMPARE, Compare))
#define COMPARE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COMPARE, CompareClass))
#define IS_COMPARE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COMPARE))
#define IS_COMPARE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COMPARE))
#define COMPARE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COMPARE, CompareClass))

/* struct ConditionCompare */
struct _ConditionCompare
{ 
  ThriftStruct parent; 

  /* public */
  Comparable * left;
  gboolean __isset_left;
  Compare * compare;
  gboolean __isset_compare;
};
typedef struct _ConditionCompare ConditionCompare;

struct _ConditionCompareClass
{
  ThriftStructClass parent;
};
typedef struct _ConditionCompareClass ConditionCompareClass;

GType condition_compare_get_type (void);
#define TYPE_CONDITION_COMPARE (condition_compare_get_type())
#define CONDITION_COMPARE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CONDITION_COMPARE, ConditionCompare))
#define CONDITION_COMPARE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CONDITION_COMPARE, ConditionCompareClass))
#define IS_CONDITION_COMPARE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CONDITION_COMPARE))
#define IS_CONDITION_COMPARE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CONDITION_COMPARE))
#define CONDITION_COMPARE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CONDITION_COMPARE, ConditionCompareClass))

/* struct uPredicate */
struct _uPredicate
{ 
  ThriftStruct parent; 

  /* public */
  ConditionCompare * term;
  gboolean __isset_term;
  GPtrArray * and_;
  gboolean __isset_and_;
  GPtrArray * or_;
  gboolean __isset_or_;
};
typedef struct _uPredicate uPredicate;

struct _uPredicateClass
{
  ThriftStructClass parent;
};
typedef struct _uPredicateClass uPredicateClass;

GType u_predicate_get_type (void);
#define TYPE_U_PREDICATE (u_predicate_get_type())
#define U_PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_U_PREDICATE, uPredicate))
#define U_PREDICATE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_U_PREDICATE, uPredicateClass))
#define IS_U_PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_U_PREDICATE))
#define IS_U_PREDICATE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_U_PREDICATE))
#define U_PREDICATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_U_PREDICATE, uPredicateClass))

/* struct Predicate */
struct _Predicate
{ 
  ThriftStruct parent; 

  /* public */
  PredicateType type;
  gboolean __isset_type;
  uPredicate * predicate;
  gboolean __isset_predicate;
};
typedef struct _Predicate Predicate;

struct _PredicateClass
{
  ThriftStructClass parent;
};
typedef struct _PredicateClass PredicateClass;

GType predicate_get_type (void);
#define TYPE_PREDICATE (predicate_get_type())
#define PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PREDICATE, Predicate))
#define PREDICATE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PREDICATE, PredicateClass))
#define IS_PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PREDICATE))
#define IS_PREDICATE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PREDICATE))
#define PREDICATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PREDICATE, PredicateClass))

/* struct NodeCondition */
struct _NodeCondition
{ 
  ThriftStruct parent; 

  /* public */
  gboolean is_null;
  gboolean __isset_is_null;
  gchar * schema;
  gboolean __isset_schema;
  GPtrArray * predicates;
  gboolean __isset_predicates;
};
typedef struct _NodeCondition NodeCondition;

struct _NodeConditionClass
{
  ThriftStructClass parent;
};
typedef struct _NodeConditionClass NodeConditionClass;

GType node_condition_get_type (void);
#define TYPE_NODE_CONDITION (node_condition_get_type())
#define NODE_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NODE_CONDITION, NodeCondition))
#define NODE_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NODE_CONDITION, NodeConditionClass))
#define IS_NODE_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NODE_CONDITION))
#define IS_NODE_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NODE_CONDITION))
#define NODE_CONDITION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NODE_CONDITION, NodeConditionClass))

/* struct LinkCondition */
struct _LinkCondition
{ 
  ThriftStruct parent; 

  /* public */
  gboolean is_null;
  gboolean __isset_is_null;
  LinkType link_type;
  gboolean __isset_link_type;
  gchar * link_name;
  gboolean __isset_link_name;
};
typedef struct _LinkCondition LinkCondition;

struct _LinkConditionClass
{
  ThriftStructClass parent;
};
typedef struct _LinkConditionClass LinkConditionClass;

GType link_condition_get_type (void);
#define TYPE_LINK_CONDITION (link_condition_get_type())
#define LINK_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LINK_CONDITION, LinkCondition))
#define LINK_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_LINK_CONDITION, LinkConditionClass))
#define IS_LINK_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LINK_CONDITION))
#define IS_LINK_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_LINK_CONDITION))
#define LINK_CONDITION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LINK_CONDITION, LinkConditionClass))

/* struct MatchCondition */
struct _MatchCondition
{ 
  ThriftStruct parent; 

  /* public */
  gboolean is_null;
  gboolean __isset_is_null;
  NodeCondition * node_first_condition;
  gboolean __isset_node_first_condition;
  NodeCondition * node_second_condition;
  gboolean __isset_node_second_condition;
  NodeCondition * node_cross_condition;
  gboolean __isset_node_cross_condition;
  LinkCondition * link_condition;
  gboolean __isset_link_condition;
};
typedef struct _MatchCondition MatchCondition;

struct _MatchConditionClass
{
  ThriftStructClass parent;
};
typedef struct _MatchConditionClass MatchConditionClass;

GType match_condition_get_type (void);
#define TYPE_MATCH_CONDITION (match_condition_get_type())
#define MATCH_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MATCH_CONDITION, MatchCondition))
#define MATCH_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_MATCH_CONDITION, MatchConditionClass))
#define IS_MATCH_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MATCH_CONDITION))
#define IS_MATCH_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_MATCH_CONDITION))
#define MATCH_CONDITION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MATCH_CONDITION, MatchConditionClass))

/* struct SchemaCreateQuery */
struct _SchemaCreateQuery
{ 
  ThriftStruct parent; 

  /* public */
  Schema * schema;
  gboolean __isset_schema;
};
typedef struct _SchemaCreateQuery SchemaCreateQuery;

struct _SchemaCreateQueryClass
{
  ThriftStructClass parent;
};
typedef struct _SchemaCreateQueryClass SchemaCreateQueryClass;

GType schema_create_query_get_type (void);
#define TYPE_SCHEMA_CREATE_QUERY (schema_create_query_get_type())
#define SCHEMA_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SCHEMA_CREATE_QUERY, SchemaCreateQuery))
#define SCHEMA_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SCHEMA_CREATE_QUERY, SchemaCreateQueryClass))
#define IS_SCHEMA_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SCHEMA_CREATE_QUERY))
#define IS_SCHEMA_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SCHEMA_CREATE_QUERY))
#define SCHEMA_CREATE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SCHEMA_CREATE_QUERY, SchemaCreateQueryClass))

/* struct SchemaGetQuery */
struct _SchemaGetQuery
{ 
  ThriftStruct parent; 

  /* public */
  gchar * schema_name;
  gboolean __isset_schema_name;
};
typedef struct _SchemaGetQuery SchemaGetQuery;

struct _SchemaGetQueryClass
{
  ThriftStructClass parent;
};
typedef struct _SchemaGetQueryClass SchemaGetQueryClass;

GType schema_get_query_get_type (void);
#define TYPE_SCHEMA_GET_QUERY (schema_get_query_get_type())
#define SCHEMA_GET_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SCHEMA_GET_QUERY, SchemaGetQuery))
#define SCHEMA_GET_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SCHEMA_GET_QUERY, SchemaGetQueryClass))
#define IS_SCHEMA_GET_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SCHEMA_GET_QUERY))
#define IS_SCHEMA_GET_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SCHEMA_GET_QUERY))
#define SCHEMA_GET_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SCHEMA_GET_QUERY, SchemaGetQueryClass))

/* struct SchemaDeleteQuery */
struct _SchemaDeleteQuery
{ 
  ThriftStruct parent; 

  /* public */
  gchar * schema_name;
  gboolean __isset_schema_name;
};
typedef struct _SchemaDeleteQuery SchemaDeleteQuery;

struct _SchemaDeleteQueryClass
{
  ThriftStructClass parent;
};
typedef struct _SchemaDeleteQueryClass SchemaDeleteQueryClass;

GType schema_delete_query_get_type (void);
#define TYPE_SCHEMA_DELETE_QUERY (schema_delete_query_get_type())
#define SCHEMA_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SCHEMA_DELETE_QUERY, SchemaDeleteQuery))
#define SCHEMA_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SCHEMA_DELETE_QUERY, SchemaDeleteQueryClass))
#define IS_SCHEMA_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SCHEMA_DELETE_QUERY))
#define IS_SCHEMA_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SCHEMA_DELETE_QUERY))
#define SCHEMA_DELETE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SCHEMA_DELETE_QUERY, SchemaDeleteQueryClass))

/* struct NodeCreateQuery */
struct _NodeCreateQuery
{ 
  ThriftStruct parent; 

  /* public */
  gchar * schema_name;
  gboolean __isset_schema_name;
  Node * node;
  gboolean __isset_node;
};
typedef struct _NodeCreateQuery NodeCreateQuery;

struct _NodeCreateQueryClass
{
  ThriftStructClass parent;
};
typedef struct _NodeCreateQueryClass NodeCreateQueryClass;

GType node_create_query_get_type (void);
#define TYPE_NODE_CREATE_QUERY (node_create_query_get_type())
#define NODE_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NODE_CREATE_QUERY, NodeCreateQuery))
#define NODE_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NODE_CREATE_QUERY, NodeCreateQueryClass))
#define IS_NODE_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NODE_CREATE_QUERY))
#define IS_NODE_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NODE_CREATE_QUERY))
#define NODE_CREATE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NODE_CREATE_QUERY, NodeCreateQueryClass))

/* struct NodeUpdateQuery */
struct _NodeUpdateQuery
{ 
  ThriftStruct parent; 

  /* public */
  NodeCondition * condition;
  gboolean __isset_condition;
  GPtrArray * properties;
  gboolean __isset_properties;
};
typedef struct _NodeUpdateQuery NodeUpdateQuery;

struct _NodeUpdateQueryClass
{
  ThriftStructClass parent;
};
typedef struct _NodeUpdateQueryClass NodeUpdateQueryClass;

GType node_update_query_get_type (void);
#define TYPE_NODE_UPDATE_QUERY (node_update_query_get_type())
#define NODE_UPDATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NODE_UPDATE_QUERY, NodeUpdateQuery))
#define NODE_UPDATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NODE_UPDATE_QUERY, NodeUpdateQueryClass))
#define IS_NODE_UPDATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NODE_UPDATE_QUERY))
#define IS_NODE_UPDATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NODE_UPDATE_QUERY))
#define NODE_UPDATE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NODE_UPDATE_QUERY, NodeUpdateQueryClass))

/* struct NodeDeleteQuery */
struct _NodeDeleteQuery
{ 
  ThriftStruct parent; 

  /* public */
  NodeCondition * condition;
  gboolean __isset_condition;
};
typedef struct _NodeDeleteQuery NodeDeleteQuery;

struct _NodeDeleteQueryClass
{
  ThriftStructClass parent;
};
typedef struct _NodeDeleteQueryClass NodeDeleteQueryClass;

GType node_delete_query_get_type (void);
#define TYPE_NODE_DELETE_QUERY (node_delete_query_get_type())
#define NODE_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NODE_DELETE_QUERY, NodeDeleteQuery))
#define NODE_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NODE_DELETE_QUERY, NodeDeleteQueryClass))
#define IS_NODE_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NODE_DELETE_QUERY))
#define IS_NODE_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NODE_DELETE_QUERY))
#define NODE_DELETE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NODE_DELETE_QUERY, NodeDeleteQueryClass))

/* struct NodeMatchQuery */
struct _NodeMatchQuery
{ 
  ThriftStruct parent; 

  /* public */
  NodeCondition * condition;
  gboolean __isset_condition;
};
typedef struct _NodeMatchQuery NodeMatchQuery;

struct _NodeMatchQueryClass
{
  ThriftStructClass parent;
};
typedef struct _NodeMatchQueryClass NodeMatchQueryClass;

GType node_match_query_get_type (void);
#define TYPE_NODE_MATCH_QUERY (node_match_query_get_type())
#define NODE_MATCH_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NODE_MATCH_QUERY, NodeMatchQuery))
#define NODE_MATCH_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_NODE_MATCH_QUERY, NodeMatchQueryClass))
#define IS_NODE_MATCH_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NODE_MATCH_QUERY))
#define IS_NODE_MATCH_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_NODE_MATCH_QUERY))
#define NODE_MATCH_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NODE_MATCH_QUERY, NodeMatchQueryClass))

/* struct LinkCreateQuery */
struct _LinkCreateQuery
{ 
  ThriftStruct parent; 

  /* public */
  Link * link;
  gboolean __isset_link;
};
typedef struct _LinkCreateQuery LinkCreateQuery;

struct _LinkCreateQueryClass
{
  ThriftStructClass parent;
};
typedef struct _LinkCreateQueryClass LinkCreateQueryClass;

GType link_create_query_get_type (void);
#define TYPE_LINK_CREATE_QUERY (link_create_query_get_type())
#define LINK_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LINK_CREATE_QUERY, LinkCreateQuery))
#define LINK_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_LINK_CREATE_QUERY, LinkCreateQueryClass))
#define IS_LINK_CREATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LINK_CREATE_QUERY))
#define IS_LINK_CREATE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_LINK_CREATE_QUERY))
#define LINK_CREATE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LINK_CREATE_QUERY, LinkCreateQueryClass))

/* struct LinkDeleteQuery */
struct _LinkDeleteQuery
{ 
  ThriftStruct parent; 

  /* public */
  MatchCondition * condition;
  gboolean __isset_condition;
};
typedef struct _LinkDeleteQuery LinkDeleteQuery;

struct _LinkDeleteQueryClass
{
  ThriftStructClass parent;
};
typedef struct _LinkDeleteQueryClass LinkDeleteQueryClass;

GType link_delete_query_get_type (void);
#define TYPE_LINK_DELETE_QUERY (link_delete_query_get_type())
#define LINK_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LINK_DELETE_QUERY, LinkDeleteQuery))
#define LINK_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_LINK_DELETE_QUERY, LinkDeleteQueryClass))
#define IS_LINK_DELETE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LINK_DELETE_QUERY))
#define IS_LINK_DELETE_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_LINK_DELETE_QUERY))
#define LINK_DELETE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LINK_DELETE_QUERY, LinkDeleteQueryClass))

/* struct MatchQuery */
struct _MatchQuery
{ 
  ThriftStruct parent; 

  /* public */
  MatchCondition * condition;
  gboolean __isset_condition;
};
typedef struct _MatchQuery MatchQuery;

struct _MatchQueryClass
{
  ThriftStructClass parent;
};
typedef struct _MatchQueryClass MatchQueryClass;

GType match_query_get_type (void);
#define TYPE_MATCH_QUERY (match_query_get_type())
#define MATCH_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MATCH_QUERY, MatchQuery))
#define MATCH_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_MATCH_QUERY, MatchQueryClass))
#define IS_MATCH_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MATCH_QUERY))
#define IS_MATCH_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_MATCH_QUERY))
#define MATCH_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MATCH_QUERY, MatchQueryClass))

/* struct uQuery */
struct _uQuery
{ 
  ThriftStruct parent; 

  /* public */
  SchemaCreateQuery * schema_create_query;
  gboolean __isset_schema_create_query;
  SchemaGetQuery * schema_get_query;
  gboolean __isset_schema_get_query;
  SchemaDeleteQuery * schema_delete_query;
  gboolean __isset_schema_delete_query;
  NodeCreateQuery * node_create_query;
  gboolean __isset_node_create_query;
  NodeUpdateQuery * node_update_query;
  gboolean __isset_node_update_query;
  NodeDeleteQuery * node_delete_query;
  gboolean __isset_node_delete_query;
  NodeMatchQuery * node_match_query;
  gboolean __isset_node_match_query;
  LinkCreateQuery * link_create_query;
  gboolean __isset_link_create_query;
  LinkDeleteQuery * link_delete_query;
  gboolean __isset_link_delete_query;
  MatchQuery * match_query;
  gboolean __isset_match_query;
};
typedef struct _uQuery uQuery;

struct _uQueryClass
{
  ThriftStructClass parent;
};
typedef struct _uQueryClass uQueryClass;

GType u_query_get_type (void);
#define TYPE_U_QUERY (u_query_get_type())
#define U_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_U_QUERY, uQuery))
#define U_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_U_QUERY, uQueryClass))
#define IS_U_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_U_QUERY))
#define IS_U_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_U_QUERY))
#define U_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_U_QUERY, uQueryClass))

/* struct Query */
struct _Query
{ 
  ThriftStruct parent; 

  /* public */
  QueryType type;
  gboolean __isset_type;
  uQuery * query;
  gboolean __isset_query;
};
typedef struct _Query Query;

struct _QueryClass
{
  ThriftStructClass parent;
};
typedef struct _QueryClass QueryClass;

GType query_get_type (void);
#define TYPE_QUERY (query_get_type())
#define QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUERY, Query))
#define QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_QUERY, QueryClass))
#define IS_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUERY))
#define IS_QUERY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_QUERY))
#define QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_QUERY, QueryClass))

/* struct Result */
struct _Result
{ 
  ThriftStruct parent; 

  /* public */
  Return return_items;
  gboolean __isset_return_items;
  Node * first;
  gboolean __isset_first;
  Link * link;
  gboolean __isset_link;
  Node * second;
  gboolean __isset_second;
};
typedef struct _Result Result;

struct _ResultClass
{
  ThriftStructClass parent;
};
typedef struct _ResultClass ResultClass;

GType result_get_type (void);
#define TYPE_RESULT (result_get_type())
#define RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RESULT, Result))
#define RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_RESULT, ResultClass))
#define IS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RESULT))
#define IS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_RESULT))
#define RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RESULT, ResultClass))

/* struct uQueryResult */
struct _uQueryResult
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * schema;
  gboolean __isset_schema;
  GPtrArray * items;
  gboolean __isset_items;
};
typedef struct _uQueryResult uQueryResult;

struct _uQueryResultClass
{
  ThriftStructClass parent;
};
typedef struct _uQueryResultClass uQueryResultClass;

GType u_query_result_get_type (void);
#define TYPE_U_QUERY_RESULT (u_query_result_get_type())
#define U_QUERY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_U_QUERY_RESULT, uQueryResult))
#define U_QUERY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_U_QUERY_RESULT, uQueryResultClass))
#define IS_U_QUERY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_U_QUERY_RESULT))
#define IS_U_QUERY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_U_QUERY_RESULT))
#define U_QUERY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_U_QUERY_RESULT, uQueryResultClass))

/* struct QueryResult */
struct _QueryResult
{ 
  ThriftStruct parent; 

  /* public */
  QueryResultType type;
  gboolean __isset_type;
  gchar * message;
  gboolean __isset_message;
  uQueryResult * result;
  gboolean __isset_result;
};
typedef struct _QueryResult QueryResult;

struct _QueryResultClass
{
  ThriftStructClass parent;
};
typedef struct _QueryResultClass QueryResultClass;

GType query_result_get_type (void);
#define TYPE_QUERY_RESULT (query_result_get_type())
#define QUERY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUERY_RESULT, QueryResult))
#define QUERY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_QUERY_RESULT, QueryResultClass))
#define IS_QUERY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUERY_RESULT))
#define IS_QUERY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_QUERY_RESULT))
#define QUERY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_QUERY_RESULT, QueryResultClass))

/* constants */

/* struct querySvcExecuteArgs */
struct _querySvcExecuteArgs
{ 
  ThriftStruct parent; 

  /* public */
  Query * query;
  gboolean __isset_query;
};
typedef struct _querySvcExecuteArgs querySvcExecuteArgs;

struct _querySvcExecuteArgsClass
{
  ThriftStructClass parent;
};
typedef struct _querySvcExecuteArgsClass querySvcExecuteArgsClass;

GType query_svc_execute_args_get_type (void);
#define TYPE_QUERY_SVC_EXECUTE_ARGS (query_svc_execute_args_get_type())
#define QUERY_SVC_EXECUTE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUERY_SVC_EXECUTE_ARGS, querySvcExecuteArgs))
#define QUERY_SVC_EXECUTE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_QUERY_SVC_EXECUTE_ARGS, querySvcExecuteArgsClass))
#define IS_QUERY_SVC_EXECUTE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUERY_SVC_EXECUTE_ARGS))
#define IS_QUERY_SVC_EXECUTE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_QUERY_SVC_EXECUTE_ARGS))
#define QUERY_SVC_EXECUTE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_QUERY_SVC_EXECUTE_ARGS, querySvcExecuteArgsClass))

/* struct querySvcExecuteResult */
struct _querySvcExecuteResult
{ 
  ThriftStruct parent; 

  /* public */
  QueryResult * success;
  gboolean __isset_success;
};
typedef struct _querySvcExecuteResult querySvcExecuteResult;

struct _querySvcExecuteResultClass
{
  ThriftStructClass parent;
};
typedef struct _querySvcExecuteResultClass querySvcExecuteResultClass;

GType query_svc_execute_result_get_type (void);
#define TYPE_QUERY_SVC_EXECUTE_RESULT (query_svc_execute_result_get_type())
#define QUERY_SVC_EXECUTE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUERY_SVC_EXECUTE_RESULT, querySvcExecuteResult))
#define QUERY_SVC_EXECUTE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_QUERY_SVC_EXECUTE_RESULT, querySvcExecuteResultClass))
#define IS_QUERY_SVC_EXECUTE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUERY_SVC_EXECUTE_RESULT))
#define IS_QUERY_SVC_EXECUTE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_QUERY_SVC_EXECUTE_RESULT))
#define QUERY_SVC_EXECUTE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_QUERY_SVC_EXECUTE_RESULT, querySvcExecuteResultClass))

#endif /* QUERY_TYPES_H */
